Program([VarDecl(Id(FirstName),StringType),VarDecl(Id(LastName),StringType),VarDecl(Id(FullName),StringType),VarDecl(Id(Count),IntType),VarDecl(Id(NameCount),IntType),VarDecl(Id(Gap),IntType),FuncDecl(Id(main),[],VoidType(),[],[AssignStmt(Id(Space),StringLiteral(  )),AssignStmt(Id(Hyphen),StringLiteral(-)),AssignStmt(Id(Greeting),StringLiteral(Hello there )),CallStmt(Id(Write),[StringLiteral(Enter the  number of names: )]),CallStmt(Id(ReadLn),[Id(NameCount)]),CallStmt(Id(WriteLn),[]),While(BinaryOp(>,Id(NameCount),IntLiteral(0)),[CallStmt(Id(Write),[StringLiteral(Enter a  name, last name first: )]),CallStmt(Id(Read),[Id(FullName)]),AssignStmt(Id(Gap),CallExpr(Id(POS),[Id(Space),Id(FullName)])),If(BinaryOp(>,Id(Gap),IntLiteral(0)),[AssignStmt(Id(LastName),CallExpr(Id(Copy),[Id(FullName),IntLiteral(1),Id(Gap)])),CallStmt(Id(Delete),[Id(FullName),IntLiteral(1),Id(Gap)]),AssignStmt(Id(FirstName),Id(FullName)),If(BinaryOp(<=,CallExpr(Id(Length),[Id(LastName)]),IntLiteral(4)),[CallStmt(Id(WriteLn),[StringLiteral(That is  a short last name)])],[]),If(BinaryOp(<>,CallExpr(Id(Pos),[Id(Hyphen),Id(LastName)]),IntLiteral(0)),[CallStmt(Id(WriteLn),[StringLiteral(That is  a hyphenated name)])],[]),If(BinaryOp(=,Id(FirstName),StringLiteral(Bill)),[CallStmt(Id(WriteLn),[StringLiteral(Bill is  a good name )])],[]),AssignStmt(Id(FullName),BinaryOp(+,BinaryOp(+,Id(FirstName),Id(Space)),Id(LastName))),CallStmt(Id(WriteLn),[Id(Greeting),Id(FullName)]),CallStmt(Id(WriteLn),[])],[]),AssignStmt(Id(NameCount),BinaryOp(-,Id(NameCount),IntLiteral(1)))])])])